generator client {
  provider = "prisma-client"
  output   = "../src/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum GlobalStatus {
  ACTIVE
  BANNED
  ADMIN
}

enum WorkspaceRole {
  OWNER
  MEMBER
  VIEWER
}

enum ProjectRole {
  PROJECT_LEAD
  CONTRIBUTOR
  PROJECT_VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum NotificationStatus {
  DELIVERED
  SEEN
}

enum LogLevel {
  INFO
  WARN
  ERROR
  SECURITY
}

// Core Tables
model User {
  id           String       @id @default(cuid())
  email        String       @unique
  password     String
  globalStatus GlobalStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  workspaceMemberships WorkspaceMembership[]
  projectMemberships   ProjectMembership[]
  taskAssignments      TaskAssignment[]
  assignedTasks        Task[]                 @relation("TaskAssignee")
  notifications        Notification[]
  auditLogs            AuditLog[]
  userDevices          UserDevice[]
  passwordResetTokens  PasswordResetToken[]
  RefreshToken         RefreshToken[]

  @@map("users")
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships WorkspaceMembership[]
  projects    Project[]

  @@map("workspaces")
}

model WorkspaceMembership {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_memberships")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace   Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  memberships ProjectMembership[]
  tasks       Task[]

  @@map("projects")
}

model ProjectMembership {
  id        String      @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole @default(CONTRIBUTOR)
  joinedAt  DateTime    @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_memberships")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  projectId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignments TaskAssignment[]
  assignees   User[]           @relation("TaskAssignee")

  @@map("tasks")
}

model TaskAssignment {
  id         String   @id @default(cuid())
  taskId     String
  userId     String
  assignedAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignments")
}

// Authentication & Session Tables
model UserDevice {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  ipAddress    String
  userAgent    String
  loginTime    DateTime @default(now())
  isRevoked    Boolean  @default(false)

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  RefreshToken RefreshToken[]

  @@map("user_devices")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// Notification & Audit Tables
model Notification {
  id              String             @id @default(cuid())
  title           String
  body            String
  recipientId     String
  status          NotificationStatus @default(DELIVERED)
  relatedEntityId String? // Can reference Task ID or other entities
  createdAt       DateTime           @default(now())

  // Relations
  recipient User @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  level     LogLevel
  userId    String?
  ipAddress String?
  action    String
  details   Json? // JSON object for specific context

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String?
  token     String   @unique
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)

  // Relations
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  device UserDevice? @relation(fields: [deviceId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([deviceId])
  @@map("refresh_tokens")
}
